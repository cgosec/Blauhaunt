name: Custom.Windows.EventLogs.Blauhaunt
author: CGO (SEC Consult)
description: |  
  This artifact will extract Event Logs related to Remote sessions, logon and logoff.
  To reduce data, the logons will be grouped by EventID, Computer, UserName, LogonType, SourceIP, Distinction (customizable).
  then the results are sorted by EventTime in ascending order,
  Security channel - EventID in 4624 AND LogonType 3, 7, or 10.
  Security channel - EventID in 4648, 4778, 4776.
  Microsoft-Windows-TerminalServices-RemoteConnectionManager/Operational - EventID 1149.
  Microsoft-Windows-TerminalServices-LocalSessionManager/Operational - EventID 21.
  Best use of this artifact is to collect RDP and Authentication events around
  a timeframe of interest and order by EventTime to scope RDP activity.
reference:
  - https://github.com/cgosec/Blauhaunt
  - This artifact is based on the Windows.EventLogs.RDPAuth artifact from Matt Green - @mgreen27
type: CLIENT
precondition: SELECT OS From info() where OS = 'windows'
parameters:
  - name: LogonTypes
    description: "LogonTypes to include in the query."
    default: '[2,3,9,10]'
    type: regex
  - name: Security
    description: path to Security event log.
    default: '%SystemRoot%\System32\Winevt\Logs\Security.evtx'
  #- name: System
   # description: path to System event log.
   # default: '%SystemRoot%\System32\Winevt\Logs\System.evtx'
  - name: LocalSessionManager
    description: path to TerminalServices-LocalSessionManager operational event log.
    default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational.evtx'
  - name: RemoteConnectionManager
    description: path to TerminalServices-RemoteConnectionManager operational event log.
    default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational.evtx'
  - name: RDPClientOperational
    description: path to TerminalServices-ClientActiveXCore RDPClient%4Operational event log.
    default: '%SystemRoot%\System32\Winevt\Logs\Microsoft-Windows-TerminalServices-RDPClient%4Operational.evtx'
  - name: DateAfter
    description: "search for events after this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp
  - name: DateBefore
    description: "search for events before this date. YYYY-MM-DDTmm:hh:ss Z"
    type: timestamp
  - name: SourceIPRegex
    default: .*
    type: regex
  - name: UserNameRegex
    default: .*
    type: regex
  - name: UserNameWhitelist
    default: '^DWM-|^UMFD-|\$$'
    type: regex
  - name: SearchVSS
    description: "add VSS into query."
    type: bool
sources:
  - query: |
      -- firstly set time bounds for performance

      LET DateAfterTime <= if(condition=DateAfter,
        then=DateAfter, else=timestamp(epoch="1600-01-01"))
      LET DateBeforeTime <= if(condition=DateBefore,
        then=DateBefore, else=timestamp(epoch="2200-01-01"))
        
      -- expand provided glob into a list of paths on the file system (fs)
      LET fspaths <= SELECT OSPath
        FROM glob(globs=[
          expand(path=Security),
          --expand(path=System),
          expand(path=LocalSessionManager),
          expand(path=RemoteConnectionManager),
          expand(path=RDPClientOperational)])
      -- function returning list of VSS paths corresponding to path
      LET vsspaths(path) = SELECT OSPath
        FROM Artifact.Windows.Search.VSS(SearchFilesGlob=path)
      
      LET process_security_events(path) = SELECT 
        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
        System.EventID.Value as EventID, 
        if(
           condition=EventData.LogonType,
           then=EventData.LogonType,
           else="") as LogonType,
        if(
           condition=System.EventID.Value = 4624,
           then=if(
             condition=EventData.ElevatedToken="%%1843",
             then="ELEVATED: YES",
             else="ELEVATED: NO"),
           else=if(
             condition=System.EventID.Value = 4776,
             then=if(
                condition=EventData.Status= 0,
                then="SUCCESS",
                else="FAILURE: " + get(item=dict(
                                `3221225572`='USER NAME DOES NOT EXIST',
                                `3221225578`='WRONG PASSWORD',
                                `3221225581`='GENERIC LOGON ERROR',
                                `3221225583`='NOT AUTHORIZED WORKSTATION',
                                `3221225585`='PASSWORD EXPIRED',
                                `3221225586`='ACCOUNT DEACTIVATED BY ADMIN',
                                `3221225875`='ACCOUNT EXPIRED',
                                `3221226020`='PASSWORD HAS TO BE CHANGED ON NEXT LOGON',
                                `3221226036`='ACCOUNT LOCKED',
                                `3221226353`='NO SECRET IN LOCAL ACCOUNT STORAGE'),
                                    member=str(str=EventData.Status))
                ),
             else=if(
                  condition=System.EventID.Value = 4648,
                  then="Process: " + EventData.ProcessName,
                  else=if(
                    condition=System.EventID.Value = 4778,
                    then="",
                    else="")
                )
            )
        ) as Distinction,
        if(
          condition=System.EventID.Value = 4672,
          then=EventData.SubjectUserName,
          else=if(
                 condition=System.EventID.Value = 4778,
                 then=EventData.AccountName,
                 else=EventData.TargetUserName)
        ) as UserName,
        if(condition=EventData.IpAddress,
           then= EventData.IpAddress,
           else=if(
            condition=System.EventID.Value = 4778,
            then=EventData.ClientAddress,
            else="-")
        )as SourceIP,
        if(condition=System.EventID.Value = 4648,
           then=System.Computer,
           else=if(
              condition=System.EventID.Value = 4776,
              then=EventData.Workstation,
              else=if(
                condition=System.EventID.Value = 4778,
                then=EventData.ClientName,
                else=parse_string_with_regex(string=get(field="Message"),regex='''Workstation Name:\s(\S*)''').g1
              )
            )
           ) as SourceHostname,
        if(
           condition=System.EventID.Value = 4648,
           then=if(
              condition=EventData.TargetServerName = 'localhost',
              then=System.Computer,
              else=EventData.TargetServerName),
            else=if(
                condition=System.EventID.Value = 4776,
                then=EventData.Workstation,
                else=System.Computer)
        ) as Destination,
        get(item=dict(
            `4624`='SUCCESSFUL LOGON',
            `4625`='FAILED LOGON',
            `4648`='LOGON USING EXPLICIT CREDENTIALS',
            `4672`='SPECIAL LOGON',
            `4776`='NTLM LOGON',
            `4778`='REMOTE SESSION RECONNECTED'),
            member=str(str=System.EventID.Value)
        ) as Description,
        -- this is to avoid having a wrong SID in 4648 events:
        if(
          condition=System.EventID.Value=4648,
          then="-",
          else=get(field="Message")
        )
        as Message
        FROM parse_evtx(filename=OSPath)
        WHERE (EventID IN (4624, 4625)
        AND LogonType =~ LogonTypes)
        OR EventID IN (4648, 4776, 4778)
        AND EventTime < DateBeforeTime
        AND EventTime > DateAfterTime
        AND if(
            condition= UserNameWhitelist,
            then= NOT UserName =~ UserNameWhitelist,
            else= True
            )
        AND UserName =~ UserNameRegex
        ORDER BY EventTime
      
      
      LET process_rdp_remote_connection_events(path) = SELECT
        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
        System.EventID.Value as EventID,
        UserData.EventXML.Param1 as UserName,
        UserData.EventXML.Param3 as SourceIP,
        "-" as LogonType,
        "-" as SourceHostname,
        "-" as Distinction,
        "RDP User authentication succeeded" as Description,
        System.Computer as Destination,
        get(field="Message") as Message
        FROM parse_evtx(filename=OSPath)
        WHERE EventID IN (1149,)  
        AND EventTime < DateBeforeTime
        AND EventTime > DateAfterTime
        AND UserName =~ UserNameRegex
        AND NOT UserName =~ UserNameWhitelist
        AND SourceIP =~ SourceIPRegex
        ORDER BY EventTime
      
      
      LET process_rdp_local_session_events(path) = SELECT
        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
        System.EventID.Value as EventID,
        split(string=UserData.EventXML.User,sep='\\\\')[1] as UserName,
        UserData.EventXML.Address as SourceIP,
        "-" as LogonType,
        "-" as SourceHostname,
        "-" as Distinction,
        "RDP Session Logon Succeeded" as Description, 
        System.Computer as Destination,
        get(field="Message") as Message
        FROM parse_evtx(filename=OSPath)
        WHERE EventID IN (21,)  
        AND EventTime < DateBeforeTime
        AND EventTime > DateAfterTime
        AND UserName =~ UserNameRegex
        AND NOT UserName =~ UserNameWhitelist
        AND SourceIP =~ SourceIPRegex
        ORDER BY EventTime
      
      
      LET process_system_events(path) = SELECT
        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
        System.EventID.Value as EventID,
        EventData.TargetUserName as UserName,
        UserData.EventXML.Address as SourceIP,
        "-" as LogonType,
        "-" as SourceHostname,
        "-" as Distinction,
        "-" as Description, 
        System.Computer as Destination
        FROM parse_evtx(filename=OSPath)
        WHERE EventID IN (9009,)  
        AND EventTime < DateBeforeTime
        AND EventTime > DateAfterTime
        AND UserName =~ UserNameRegex
        AND NOT UserName =~ UserNameWhitelist
        AND SourceIP =~ SourceIPRegex
        ORDER BY EventTime
        
      LET process_rdp_client_events(path) = SELECT
        timestamp(epoch=int(int=System.TimeCreated.SystemTime)) AS EventTime,
        System.EventID.Value as EventID,
        System.Security.UserID as UserName,
        UserData.EventXML.Address as SourceIP,
        "-" as LogonType,
        "-" as SourceIP,
        System.Computer as SourceHostname,
        "-" as Distinction,
        "RDP ClientActiveX is trying to connect to the server (collected on origin system) from Microsoft-Windows-TerminalServices-RDPClient/Operational" as Description,
        if(
          condition=EventData.Value = "127.0.0.1",
          then=System.Computer,
          else=EventData.Value
        ) as Destination,
        EventData.Value as Destination,
        Message as Message
        FROM parse_evtx(filename=OSPath)
        WHERE EventID IN (1024,)
        AND EventTime < DateBeforeTime
        AND EventTime > DateAfterTime
        AND UserName =~ UserNameRegex
        AND NOT UserName =~ UserNameWhitelist
        AND SourceIP =~ SourceIPRegex
        ORDER BY EventTime
      
      
      LET evtxsearch(PathList) = SELECT * FROM 
        foreach(
          row=PathList,
          query={
            SELECT * FROM
              if(
              condition=split(string=OSPath,sep='\\\\')[-1]=~"Security",
              then=process_security_events(path=OSPath),
              else=if(
                condition=split(string=OSPath,sep='\\\\')[-1]=~"Microsoft-Windows-TerminalServices-LocalSessionManager%4Operational",
                then=process_rdp_local_session_events(path=OSPath),
                else=if(
                  condition=split(string=OSPath,sep='\\\\')[-1]=~"Microsoft-Windows-TerminalServices-RemoteConnectionManager%4Operational",
                  then=process_rdp_remote_connection_events(path=OSPath),
                  else=if(
                    condition=split(string=OSPath,sep='\\\\')[-1]=~"Microsoft-Windows-TerminalServices-RDPClient%4Operational",
                    then=process_rdp_client_events(path=OSPath),
                    else=if(
                      condition=split(string=OSPath,sep='\\\\')[-1]=~"System",
                      then=process_system_events(path=OSPath),
                      else=scope()
                    )
                  )
                )
              )
            )
          },
          async=true
        )
      
      LET include_vss = SELECT * FROM
        foreach(
          row=fspaths,
          query={
            SELECT *
            FROM evtxsearch(PathList={
              SELECT OSPath FROM vsspaths(path=OSPath)
              GROUP BY EventRecordID, Channel
            }
          )
         }
        )

      -- exclude VSS in EvtxHunt
      LET exclude_vss = SELECT *
          FROM evtxsearch(PathList={SELECT OSPath FROM fspaths})

      -- return rows
      LET search = SELECT *
      FROM
      if(
        condition=SearchVSS,
        then=include_vss,
        else=exclude_vss
      )
        
      LET sort = SELECT * FROM search
      ORDER BY EventTime
          
      let grouped = SELECT EventTime, enumerate(items=EventTime) as LogonTimes, Destination, UserName,
      parse_string_with_regex(string=Message,regex='''Security\sID:\s(.*)\s''').g1 as SID,
      EventID, LogonType, Description, Distinction, SourceIP, SourceHostname, count() as LogonCount
      FROM sort
      GROUP BY EventID, Destination, UserName, LogonType, SourceIP, Distinction  
      ORDER BY EventTime
        
      SELECT * FROM grouped
